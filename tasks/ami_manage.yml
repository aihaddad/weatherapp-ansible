- name: Check for existing base webserver
  ec2_instance_info:
    filters:
      instance-state-name: ['pending', 'running', 'stopped']
      tag:Name: BaseWebserver
  delegate_to: localhost
  register: base_webserver
  tags: ['create']

- name: Create AMI from base webserver
  ec2_ami:
    instance_id: "{{ base_webserver.instances[0].instance_id }}"
    wait: yes
    name: "WeatherappDockerAMI-{{ ansible_date_time.date }}T{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"
    tags:
      Name: WeatherappWebserverAMI
      CreatedBy: Ansible
  delegate_to: localhost
  register: ami
  when: base_webserver.instances!=[]
  tags: ['create']

- name: Get webserver AMI facts
  ec2_ami_info:
    owner: "{{ aws_account_number }}"
    filters:
      tag:Name: WeatherappWebserverAMI
      tag:CreatedBy: Ansible
  register: webserver_amis
  tags: ['cleanup']

- name: Cleanup facts file
  file:
    path: facts/webserver_amis.yml
    state: absent
  tags: ['cleanup']

- name: Store facts to YAML
  lineinfile:
    path: facts/webserver_amis.yml
    create: yes
    line: "{{ webserver_amis | to_nice_yaml(indent=2) }}"

- name: Cleanup webserver AMIs
  ec2_ami:
    image_id: "{{ item.image_id }}"
    delete_snapshot: yes
    state: absent
  loop: "{{ webserver_amis.images }}"
  tags: ['never', 'cleanup']